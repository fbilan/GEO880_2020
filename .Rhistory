# ratio of trips that start within metro buffer and trips in cluster A
ratio_metrocluster <- nrow(all_bike_trips_within_metro_buffer) / nrow(a_sf)
biketrips_a$weekday <- weekdays(as.Date(biketrips_a$start_day)+1) # the weekday is only correct with +1
weekday_count <- biketrips_a %>% group_by(start_hour, weekday) %>% summarize(count=n())
dayLabs<-c("Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag","Sonntag")
weekday_count$weekday <- factor(weekday_count$weekday, levels = rev(dayLabs))
weekday_count <-weekday_count[order(weekday_count$weekday), ]
# additional plot.
# ggplot(data = weekday_count, mapping = aes(x = start_hour,
#                                           y = weekday,
#                                         fill = count)) +
#                                        geom_tile() +
#                                        xlab(label = "Hour") +
#                                        ylab(label = "Weekday") +
#                                        ggtitle("Absolute number of trips for each day") +
#                                        scale_fill_gradient("Count")
# function to retrieve the statistics for a specific day
# number is the number of mondays (e.g.) in the dataset. Monday appears 14 times, the rest 13 times
weekday_count <- biketrips_a %>% group_by(weekday) %>% summarize(count=n())
weekday_count$weekday <- factor(weekday_count$weekday, levels = dayLabs)
weekday_count <-weekday_count[order(weekday_count$weekday), ]
weekday_count$mean_trips <- round(weekday_count$count/14,2) # 14 weeks are included in dataset
weekday_count$mean_trips[1] <- round(weekday_count$count[1]/15,2) # monday is included 15 times (14 weeks + 1 day)
weekday_count$percentage <- round(weekday_count$count/sum(weekday_count$count),3)*100
weekday_count
# additional plot.
ggplot(data = weekday_count, mapping = aes(x = start_hour,
y = weekday,
fill = count)) +
geom_tile() +
xlab(label = "Hour") +
ylab(label = "Weekday") +
ggtitle("Absolute number of trips for each day") +
scale_fill_gradient("Count")
biketrips_a$weekday <- weekdays(as.Date(biketrips_a$start_day)+1) # the weekday is only correct with +1
weekday_count <- biketrips_a %>% group_by(start_hour, weekday) %>% summarize(count=n())
dayLabs<-c("Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag","Sonntag")
weekday_count$weekday <- factor(weekday_count$weekday, levels = rev(dayLabs))
weekday_count <-weekday_count[order(weekday_count$weekday), ]
# additional plot.
# ggplot(data = weekday_count, mapping = aes(x = start_hour,
#                                           y = weekday,
#                                         fill = count)) +
#                                        geom_tile() +
#                                        xlab(label = "Hour") +
#                                        ylab(label = "Weekday") +
#                                        ggtitle("Absolute number of trips for each day") +
#                                        scale_fill_gradient("Count")
# function to retrieve the statistics for a specific day
# number is the number of mondays (e.g.) in the dataset. Monday appears 14 times, the rest 13 times
weekday_count <- biketrips_a %>% group_by(weekday) %>% summarize(count=n())
weekday_count$weekday <- factor(weekday_count$weekday, levels = dayLabs)
weekday_count <-weekday_count[order(weekday_count$weekday), ]
weekday_count$mean_trips <- round(weekday_count$count/14,2) # 14 weeks are included in dataset
weekday_count$mean_trips[1] <- round(weekday_count$count[1]/15,2) # monday is included 15 times (14 weeks + 1 day)
weekday_count$percentage <- round(weekday_count$count/sum(weekday_count$count),3)*100
weekday_count
weekday_count_new <- biketrips_a %>%
group_by(start_hour, weekday %in% dayLabs[1:5]) %>%
summarize(count=n())
names(weekday_count_new)[2] <- "type"
weekday_count_new <- weekday_count_new %>% mutate(type = ifelse(type == TRUE, "WeekDAY", "WeekEND"))
weekend <- weekday_count_new %>% filter(type == "WeekEND") %>% mutate(count = count/2/13) #normalize per day
weekday <- weekday_count_new %>% filter(type == "WeekDAY") %>% mutate(count = count/5/13) #normalize per day
plot(x=weekday$start_hour, y=weekday$count, type = "b", pch = 19, col = "blue", xlab = "Start Hour", ylab = "Number of trips", main ="")
lines(weekend$start_hour, y=weekend$count, type = "b", pch = 19, col = "green", add = T)
legend("topleft", legend=c("Weekday-Day", "Weekend-Day"),col=c("blue", "green"), lty = 1, cex=0.8)
### Temporal Analysis ###
day_hour <- function(dataset = biketrips_a, day, number){
day_stat <- dataset %>% filter(weekday == day) %>% group_by(start_hour) %>% summarize(count = n()) %>% mutate(count = count/number)
return (day_stat)
}
monday <-day_hour(day = "Montag", number = 14)
tuesday <- day_hour(day = "Dienstag", number = 13)
wednesday <- day_hour(day = "Mittwoch", number = 13)
thursday <- day_hour(day = "Donnerstag", number = 13)
friday <- day_hour(day = "Freitag", number = 13)
saturday <- day_hour(day = "Samstag", number = 13)
sunday <- day_hour(day = "Sonntag", number = 13)
# plot(day)
plot(monday$start_hour, monday$count, type = "o", col = "blue", ylim = c(0,90), main = " ", xlab = "Hour", ylab = "Count")
lines(tuesday$start_hour, tuesday$count, type = "o", col = "red")
lines(wednesday$start_hour, wednesday$count, type = "o", col = "chartreuse4")
lines(thursday$start_hour, thursday$count, type = "o", col = "blueviolet")
lines(friday$start_hour, friday$count, type = "o", col = "darkorange")
lines(saturday$start_hour, saturday$count, type = "o", col = "gray")
lines(sunday$start_hour, sunday$count, type = "o", col = "black")
legend("topleft", legend=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"),col=c("blue", "red", "chartreuse4", "blueviolet", "darkorange", "gray", "black"), lty = 1, cex= 0.8)
# function to retrieve the statistics for a specific day
# number is the number of mondays (e.g.) in the dataset. Monday appears 14 times, the rest 13 times
day_hour <- function(dataset = biketrips_a, day, number){
day_stat <- dataset %>% filter(weekday == day) %>% group_by(start_hour) %>% summarize(count = n()) %>% mutate(count = count/number)
return (day_stat)
}
monday <-day_hour(day = "Montag", number = 14)
tuesday <- day_hour(day = "Dienstag", number = 13)
wednesday <- day_hour(day = "Mittwoch", number = 13)
thursday <- day_hour(day = "Donnerstag", number = 13)
friday <- day_hour(day = "Freitag", number = 13)
saturday <- day_hour(day = "Samstag", number = 13)
sunday <- day_hour(day = "Sonntag", number = 13)
# plot(day)
plot(monday$start_hour, monday$count, type = "o", col = "blue", ylim = c(0,90), main = " ", xlab = "Hour", ylab = "Count")
lines(tuesday$start_hour, tuesday$count, type = "o", col = "red")
lines(wednesday$start_hour, wednesday$count, type = "o", col = "chartreuse4")
lines(thursday$start_hour, thursday$count, type = "o", col = "blueviolet")
lines(friday$start_hour, friday$count, type = "o", col = "darkorange")
lines(saturday$start_hour, saturday$count, type = "o", col = "gray")
lines(sunday$start_hour, sunday$count, type = "o", col = "black")
legend("topleft", legend=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"),col=c("blue", "red", "chartreuse4", "blueviolet", "darkorange", "gray", "black"), lty = 1, cex= 0.8)
# electric vs. standard analysis
electric <- biketrips_a %>% filter(bike_type == "electric")
standard <- biketrips_a %>% filter(bike_type == "standard")
par(mfrow=c(1,3))
biketrips_a$bike_type <- factor(biketrips_a$bike_type)
boxplot(biketrips_a$duration ~ biketrips_a$bike_type, col="grey", main = "Duration", xlab = "Bike Type", ylab = "Duration [min]", outline = FALSE)
boxplot(biketrips_a$velocity ~ biketrips_a$bike_type, col="grey", main = "Velocity", xlab = "Bike Type", ylab = "Velocity [km/h]")
boxplot(biketrips_a$distance ~ biketrips_a$bike_type, col="grey", main = "Distance", xlab = "Bike Type", ylab = "Distance [km]")
par(mfrow=c(1,1))
# extract whether multiple people are moving together (start and end at the same time at the same station)
biketrips_a$together <- FALSE
time_diff_ok <- function(trip_a, trip_b){
diff_starttime <- biketrips_a$start_time[trip_a]-biketrips_a$start_time[trip_b]
diff_endtime <- abs(biketrips_a$end_time[trip_a]-biketrips_a$end_time[trip_b]) # absolute value because end_time is not sorted
if (diff_starttime < 3 & diff_endtime < 3){
return("TRUE")
}
else {
return("FALSE")
}
}
for (trip in 1:nrow(biketrips_a)){ # iterate through data set
for (minus in 1:100){ # iterate through the next 100 trips
if (trip-minus > 0){
if (biketrips_a$start_station[trip] == biketrips_a$start_station[trip-minus] & biketrips_a$end_station[trip] == biketrips_a$end_station[trip-minus]){
if (time_diff_ok(trip, trip-minus) == "TRUE"){ # assign TRUE to both trips, if time_diff_ok returned TRUE
biketrips_a$together[trip] <- TRUE
biketrips_a$together[trip-minus] <- TRUE
}
}
}
}
}
tog <- biketrips_a %>% filter(together == TRUE) %>% nrow()
ratio <- tog / nrow(biketrips_a)
biketrips_a <- biketrips_a %>%
mutate(purpose = ifelse(velocity > mean(biketrips_a$velocity) | passholder_type %in% c("Monthly Pass", "Annual Pass", "Flex Pass") & together == FALSE & duration < 15 & trip_route_category == "One Way", "commuter", "tourist"))
purpose_proportion_df <- biketrips_a %>% group_by(purpose) %>% summarize('Proportion [%]' = round(n()*100/nrow(biketrips_a),2))
purpose_proportion_df
ratio <- tog / nrow(biketrips_a)
purpose_proportion_df
time_purpose <- biketrips_a %>% group_by(purpose, start_hour) %>% summarize(count = n()/92)
commuter <- time_purpose %>% filter(purpose == "commuter")
tourist <- time_purpose %>% filter(purpose == "tourist")
plot(commuter$start_hour, commuter$count, type = "b", col = "blue", xlab = "Hour", ylab = "Number of trips", main = " ")
lines(tourist$start_hour, tourist$count, type = "b", col = "red")
legend("topleft", legend=c("Commuter", "Tourist"),col=c("blue", "red"), lty = 1, cex=0.8)
commuter <- biketrips_a %>% filter(purpose == "commuter")
tourist <- biketrips_a %>% filter(purpose == "tourist")
commuter_meanduration <- mean(commuter$duration)
commuter_meandistance <- mean(commuter$distance)
tourist_meanduration <- mean(tourist$duration)
tourist_meandistance <- mean(tourist$distance)
# prepare data for plot
# weekday-weekend
tourist_com <- tourist %>%
group_by(start_hour, weekday %in% dayLabs[1:5]) %>%
summarize(count=n())
names(tourist_com)[2] <- "type"
tourist_com <- tourist_com %>% mutate(type = ifelse(type == TRUE, "WeekDAY", "WeekEND"))
tou_end <- tourist_com %>% filter(type == "WeekEND") %>% mutate(count = count/2/13) #normalize per day
tou_day <- tourist_com %>% filter(type == "WeekDAY") %>% mutate(count = count/5/13) #normalize per day
commuter_com <- commuter %>%
group_by(start_hour, weekday %in% dayLabs[1:5]) %>%
summarize(count=n())
names(commuter_com)[2] <- "type"
commuter_com <- commuter_com %>% mutate(type = ifelse(type == TRUE, "WeekDAY", "WeekEND"))
com_end <- commuter_com %>% filter(type == "WeekEND") %>% mutate(count = count/2/13) #normalize per day
com_day <- commuter_com %>% filter(type == "WeekDAY") %>% mutate(count = count/5/13) #normalize per day
# weekday
monday <-day_hour(dataset = tourist, day = "Montag", number = 14)
tuesday <- day_hour(dataset = tourist, day = "Dienstag", number = 13)
wednesday <- day_hour(dataset = tourist, day = "Mittwoch", number = 13)
thursday <- day_hour(dataset = tourist, day = "Donnerstag", number = 13)
friday <- day_hour(dataset = tourist, day = "Freitag", number = 13)
saturday <- day_hour(dataset = tourist, day = "Samstag", number = 13)
sunday <- day_hour(dataset = tourist, day = "Sonntag", number = 13)
Monday <-day_hour(dataset = commuter, day = "Montag", number = 14)
Tuesday <- day_hour(dataset = commuter, day = "Dienstag", number = 13)
Wednesday <- day_hour(dataset = commuter, day = "Mittwoch", number = 13)
Thursday <- day_hour(dataset = commuter, day = "Donnerstag", number = 13)
Friday <- day_hour(dataset = commuter, day = "Freitag", number = 13)
Saturday <- day_hour(dataset = commuter, day = "Samstag", number = 13)
Sunday <- day_hour(dataset = commuter, day = "Sonntag", number = 13)
commuter <- biketrips_a %>%
filter(purpose == "commuter")
tourist <- biketrips_a %>%
filter(purpose == "tourist")
commuter_meanduration <- mean(commuter$duration)
commuter_meandistance <- mean(commuter$distance)
tourist_meanduration <- mean(tourist$duration)
tourist_meandistance <- mean(tourist$distance)
# prepare data for plot
# weekday-weekend
tourist_com <- tourist %>%
group_by(start_hour, weekday %in% dayLabs[1:5]) %>%
summarize(count=n())
names(tourist_com)[2] <- "type"
tourist_com <- tourist_com %>%
mutate(type = ifelse(type == TRUE, "WeekDAY", "WeekEND"))
tou_end <- tourist_com %>%
filter(type == "WeekEND") %>%
mutate(count = count/2/13) #normalize per day
tou_day <- tourist_com %>%
filter(type == "WeekDAY") %>%
mutate(count = count/5/13) #normalize per day
commuter_com <- commuter %>%
group_by(start_hour, weekday %in% dayLabs[1:5]) %>%
summarize(count=n())
names(commuter_com)[2] <- "type"
commuter_com <- commuter_com %>%
mutate(type = ifelse(type == TRUE, "WeekDAY", "WeekEND"))
com_end <- commuter_com %>%
filter(type == "WeekEND") %>%
mutate(count = count/2/13) #normalize per day
com_day <- commuter_com %>%
filter(type == "WeekDAY") %>%
mutate(count = count/5/13) #normalize per day
# assign weekday information to each day for plot
monday <-day_hour(dataset = tourist, day = "Montag", number = 14)
tuesday <- day_hour(dataset = tourist, day = "Dienstag", number = 13)
wednesday <- day_hour(dataset = tourist, day = "Mittwoch", number = 13)
thursday <- day_hour(dataset = tourist, day = "Donnerstag", number = 13)
friday <- day_hour(dataset = tourist, day = "Freitag", number = 13)
saturday <- day_hour(dataset = tourist, day = "Samstag", number = 13)
sunday <- day_hour(dataset = tourist, day = "Sonntag", number = 13)
Monday <-day_hour(dataset = commuter, day = "Montag", number = 14)
Tuesday <- day_hour(dataset = commuter, day = "Dienstag", number = 13)
Wednesday <- day_hour(dataset = commuter, day = "Mittwoch", number = 13)
Thursday <- day_hour(dataset = commuter, day = "Donnerstag", number = 13)
Friday <- day_hour(dataset = commuter, day = "Freitag", number = 13)
Saturday <- day_hour(dataset = commuter, day = "Samstag", number = 13)
Sunday <- day_hour(dataset = commuter, day = "Sonntag", number = 13)
# plot(day)
par(mfrow=c(1,2))
plot(x=com_day$start_hour, y=com_day$count, type = "b", pch = 19, col = "blue", xlab = "Start Hour", ylab = "Count", main ="Commuter")
lines(com_end$start_hour, y=com_end$count, type = "b", pch = 19, col = "green", add = T)
legend("bottomright", legend=c("Weekday-Day", "Weekend-Day"),col=c("blue", "green"), lty = 1, cex=0.8)
plot(x=tou_end$start_hour, y=tou_end$count, type = "b", pch = 19, col = "green", xlab = "Start Hour", ylab = "Count", main ="Tourist")
lines(tou_day$start_hour, y=tou_day$count, type = "b", pch = 19, col = "blue", add = T)
legend("bottomright", legend=c("Weekday-Day", "Weekend-Day"),col=c("blue", "green"), lty = 1, cex=0.8)
par(mfrow=c(1,2))
plot(x=com_day$start_hour, y=com_day$count, type = "b", pch = 19, col = "blue", xlab = "Start Hour", ylab = "Count", main ="Commuter")
lines(com_end$start_hour, y=com_end$count, type = "b", pch = 19, col = "green", add = T)
legend("bottomright", legend=c("Weekday-Day", "Weekend-Day"),col=c("blue", "green"), lty = 1, cex=0.8)
plot(x=tou_end$start_hour, y=tou_end$count, type = "b", pch = 19, col = "green", xlab = "Start Hour", ylab = "Count", main ="Tourist")
lines(tou_day$start_hour, y=tou_day$count, type = "b", pch = 19, col = "blue", add = T)
legend("bottomright", legend=c("Weekday-Day", "Weekend-Day"),col=c("blue", "green"), lty = 1, cex=0.8)
par(mfrow=c(1,2))
plot(Monday$start_hour, Monday$count, type = "o", col = "blue", ylim = c(0,90), main = "Commuter", xlab = "Hour", ylab = "Count")
lines(Tuesday$start_hour, Tuesday$count, type = "o", col = "red")
lines(Wednesday$start_hour, Wednesday$count, type = "o", col = "chartreuse4")
lines(Thursday$start_hour, Thursday$count, type = "o", col = "blueviolet")
lines(Friday$start_hour, Friday$count, type = "o", col = "darkorange")
lines(Saturday$start_hour, Saturday$count, type = "o", col = "gray")
lines(Sunday$start_hour, Sunday$count, type = "o", col = "black")
legend("topleft", legend=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"),col=c("blue", "red", "chartreuse4", "blueviolet", "darkorange", "gray", "black"), lty = 1, cex= 0.8)
plot(monday$start_hour, monday$count, type = "o", col = "blue", ylim = c(0,90), main = "Tourist", xlab = "Hour", ylab = "Count")
lines(tuesday$start_hour, tuesday$count, type = "o", col = "red")
lines(wednesday$start_hour, wednesday$count, type = "o", col = "chartreuse4")
lines(thursday$start_hour, thursday$count, type = "o", col = "blueviolet")
lines(friday$start_hour, friday$count, type = "o", col = "darkorange")
lines(saturday$start_hour, saturday$count, type = "o", col = "gray")
lines(sunday$start_hour, sunday$count, type = "o", col = "black")
legend("topleft", legend=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"),col=c("blue", "red", "chartreuse4", "blueviolet", "darkorange", "gray", "black"), lty = 1, cex= 0.8)
par(mfrow=c(1,1))
## Create overview map
pal <- colorFactor(c("navy", "red", "yellow", "orange"), domain = c("A", "B", "C", "D"))
content <- paste("Cluster: ", bike_start_sf$cluster_start)
overview_map <- leaflet(bike_start_sf) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(opacity = 0.6)) %>%
addRectangles(
lng1=min(biketrips_a$start_lon)-0.02, lat1=min(biketrips_a$start_lat)-0.02,
lng2=max(biketrips_a$start_lon)+0.02, lat2=max(biketrips_a$start_lat)+0.02,
fillColor = "transparent", popup = "Research Area: Cluster A") %>%
addCircleMarkers(color = ~pal(cluster_start), radius = 1, popup = content)
overview_map
### Preliminaries ###
pkgTest <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
pkgTest("dplyr")
pkgTest("lubridate")
pkgTest("ggplot2")
pkgTest("raster")
pkgTest("sf")
pkgTest("sp")
pkgTest("leaflet")
pkgTest("tidyverse")
pkgTest("geosphere")
pkgTest("rgeos")
pkgTest("spatstat")
pkgTest("maptools")
WGS84 <- "+init=epsg:4326"
NAD83 <- "+init=epsg:6423"
knitr::opts_chunk$set(echo = TRUE)
options(warning=FALSE)    # Don't show warnings
par(mfrow=c(1,1))         # Reset plot placement to normal 1 by 1
### Load Data ###
all_stations <- st_read(file.path("Metro/All/Stations_all_0715.shp"), quiet = TRUE)
all_stations <- st_as_sf(all_stations, coords = c("LONG", "LAT"), crs = WGS84)
all_stations_sp <- all_stations %>%
st_transform(crs = NAD83) %>%
as("Spatial")
all_stations <- st_transform(all_stations, crs = WGS84)
biketrips <- read.csv("bike-trips-LA-q3.csv", sep = ",")
station_dic <- read.csv("station_table.csv", sep = ";")
station_dic <- station_dic[,1:2] %>%
mutate(Station_ID = as.character(Station_ID))
### Clear Data ###
# get rid of trips without coordinates and columns we don't need
biketrips <- biketrips[!is.na(biketrips$start_lat),]
biketrips <- biketrips[!is.na(biketrips$end_lat),]
# assign character for each cluster depending on coordinates
biketrips <- biketrips %>%
mutate(cluster_start = ifelse(start_lat > 34.1364, "B", ifelse(start_lat < 33.8945, "C", ifelse(start_lon > -118.35, "A", "D"))))
biketrips <- biketrips %>%
mutate(cluster_end = ifelse(end_lat > 34.1364, "B", ifelse(end_lat < 33.8945, "C", ifelse(end_lon > -118.35, "A", "D"))))
## are start and end region the same? yes, only for 3 trips they are different -> focus on cluster a
biketrips <- biketrips %>%
mutate(within = ifelse(cluster_start == cluster_end, TRUE, FALSE))
# add hour, day, month and time to data set and adjust data types
biketrips <- biketrips %>%
mutate(start_time=as.POSIXct(start_time, format="%m/%d/%Y %H:%M")) %>%
mutate(start_hour = as.POSIXlt(start_time)$hour) %>%
mutate(start_day=floor_date(start_time, unit="day")) %>%
mutate(start_month=floor_date(start_time, unit="month")) %>%
mutate(end_time=as.POSIXct(end_time, format="%m/%d/%Y %H:%M")) %>%
mutate(end_hour = as.POSIXlt(end_time)$hour) %>%
mutate(end_day=floor_date(end_time, unit="day")) %>%
mutate(end_month=floor_date(end_time, unit="month")) %>%
mutate(start_station = as.character(start_station)) %>%
mutate(end_station = as.character(end_station)) %>%
mutate(start_lon = as.numeric(start_lon)) %>%
mutate(start_lat = as.numeric(start_lat)) %>%
mutate(end_lon = as.numeric(end_lon)) %>%
mutate(end_lat = as.numeric(end_lat))
# calculate distance and velocity (convert to NAD83 and use pythagoras) and bind it to biketrips
biketrips_duration <- biketrips %>%
group_by(duration) %>%
summarize(count=n())
biketrips <- biketrips %>%
filter(duration > 0, duration < 1430)
biketrips_start <- biketrips[c("start_lon", "start_lat")] %>%
st_as_sf(coords = c("start_lon", "start_lat"), crs = WGS84) %>%
st_transform(crs = NAD83)
biketrips_end <- biketrips[c("end_lon", "end_lat")] %>%
st_as_sf(coords = c("end_lon", "end_lat"), crs = WGS84) %>%
st_transform(crs = NAD83)
biketrips_dist <- st_coordinates(biketrips_start) %>%
cbind(st_coordinates(biketrips_end))
colnames(biketrips_dist) <- c("x1", "y1", "x2", "y2")
biketrips_dist <- as.data.frame(biketrips_dist) %>%
mutate(distance = sqrt((x1-x2)**2 + (y1-y2)**2)/1000)
biketrips <- biketrips %>%
cbind(distance = biketrips_dist$distance) %>%
mutate(velocity = distance / duration*60)
# create sf object
bike_start_sf <- biketrips %>%
st_as_sf(coords = c("start_lon", "start_lat"), crs = WGS84)
biketrips_a <- biketrips %>%
filter(cluster_start == "A" & within == TRUE)
## Create overview map
pal <- colorFactor(c("navy", "red", "yellow", "orange"), domain = c("A", "B", "C", "D"))
content <- paste("Cluster: ", bike_start_sf$cluster_start)
overview_map <- leaflet(bike_start_sf) %>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(opacity = 0.6)) %>%
addRectangles(
lng1=min(biketrips_a$start_lon)-0.02, lat1=min(biketrips_a$start_lat)-0.02,
lng2=max(biketrips_a$start_lon)+0.02, lat2=max(biketrips_a$start_lat)+0.02,
fillColor = "transparent", popup = "Research Area: Cluster A") %>%
addCircleMarkers(color = ~pal(cluster_start), radius = 1, popup = content)
overview_map
# number of trips in each cluster
ntrips_cluster <- biketrips %>%
group_by(cluster_start) %>%
summarize(count=n())
# get number of stations in cluster A
get_no_of_stations <- function(df){
station1 <- df$start_station
station2 <- df$end_station
station1 <- as.vector(station1)
station2 <- as.vector(station2)
stations <- c(station1, station2)
station <- unique(stations) # remove duplicates
return(length(station))
}
station_dataset <- get_no_of_stations(biketrips)
station_a <- get_no_of_stations(biketrips_a)
overview_df <- data.frame("Level" = c("Overall", "Cluster A", "Rounded Proportion [%]"),
"Number_of_trips" = c(sum(ntrips_cluster$count), nrow(biketrips_a), round(nrow(biketrips_a)/sum(ntrips_cluster$count)*100)),
"Number_of_stations" = c(station_dataset, station_a, round(station_a/station_dataset*100)))
overview_df
# attempt to predict distance out of duration for round trips (because they have no distance) -> failed
bike_plot <- biketrips_a %>%
filter(distance > 0.001)
linearMod <- lm(distance ~ duration, data=bike_plot)
#summary(linearMod) # adj. rsquared 1.73% -> very low
scatter.smooth(x=bike_plot$distance, xlab="Trip Distance [km]", y=bike_plot$duration, ylab="Trip Duration [min]", main=" ")
# some simple data exploration to get an idea what we're working with
biketrips_a_meanduration <- mean(biketrips_a$duration)
biketrips_a_meandistance <- mean(biketrips_a$distance)
biketrips_a_oneway <- biketrips_a %>%
filter(trip_route_category != "Round Trip")
biketrips_a_meandistance <- mean(biketrips_a_oneway$distance)
biketrips_a_passholderdist <- biketrips_a %>%
group_by(passholder_type) %>%
summarize(count=n())
# calculate balance for each station
hourly_start <- biketrips_a %>%
group_by(start_station, start_hour) %>%
summarize(count=n())
colnames(hourly_start) <- c("Station_ID", "Hour", "Count_Start")
hourly_end <- biketrips_a %>%
group_by(end_station, end_hour) %>%
summarize(count=n())
colnames(hourly_end) <- c("Station_ID", "Hour", "Count_End")
hourly <- hourly_start %>%
full_join(hourly_end, copy = FALSE, by= c("Station_ID", "Hour"))
hourly[is.na(hourly)] <- 0
hourly$diff <- hourly$Count_Start-hourly$Count_End
hourly <- hourly %>%
inner_join(station_dic, copy = FALSE, by = "Station_ID")
## a lot of trips between Union station and Main/1st St (location of Los Angeles Department of Transportation)
ggplot(data = hourly, mapping = aes(x = Hour,
y = Station_Name,
fill = diff)) +
geom_tile() +
xlab(label = "Hour") +
ylab(label = "Start Station") +
scale_fill_gradient2("Difference")
# extract the two most "popular" stations
twostations <- hourly %>%
filter(Station_ID %in% c(3030, 3014))
total_trips_2stations <- biketrips_a %>%
filter(start_station %in% c(3030, 3014) | end_station %in% c(3030, 3014)) %>%
nrow()
total_between_2stations <- biketrips_a %>%
filter(start_station == 3030 & end_station == 3014 | start_station == 3014 & end_station == 3030) %>%
nrow()
ratio_2stations <- total_between_2stations / total_trips_2stations
# Only 27% of all trips starting or ending at either 3014 or 3030 are used for trips between the two stations
ggplot(data = twostations, mapping = aes(x = Hour,
y = Station_Name,
fill = diff)) +
geom_tile() +
xlab(label = "Hour") +
ylab(label = "Start Station") +
scale_fill_gradient2("Difference")
View(biketrips_a)
bike_test <- biketrips_a[c(1:100), c(5:10)]
bike_test <- biketrips_a[c(1:100), c(5:10)]
for (i in nrow(bike_test)){
if (as.numeric(bike_test[i,1]>as.numeric(bike_test[i,4])))
temp <- bike_test[i,c(1:3)]
bike_test[i,c(1:3)] <- bike_test[i,c(4:6)]
bike_test[i,c(4:6)] <- test
}
bike_test <- biketrips_a[c(1:100), c(5:10)]
for (i in nrow(bike_test)){
if (as.numeric(bike_test[i,1]>as.numeric(bike_test[i,4])))
temp <- bike_test[i,c(1:3)]
bike_test[i,c(1:3)] <- bike_test[i,c(4:6)]
bike_test[i,c(4:6)] <- temp
}
bike_test <- biketrips_a[c(1:100), c(5:10)]
for (i in nrow(bike_test)){
bike_test <- biketrips_a[c(1:100), c(5:10)]
for (i in nrow(bike_test)){
if (as.numeric(bike_test[i,1]>as.numeric(bike_test[i,4]))){
temp <- bike_test[i,c(1:3)]
bike_test[i,c(1:3)] <- bike_test[i,c(4:6)]
bike_test[i,c(4:6)] <- temp
}
}
bike_test <- bike_test %>% group_by(start_station, start_lat, start_lon, end_station, end_lat, end_lon) %>% summarize(count = n())
View(bike_test)
bike_test
asdf
bike_test <- biketrips_a[c(1:100), c(5:10)]
for (i in nrow(bike_test)){
if (as.numeric(bike_test[i,1]>as.numeric(bike_test[i,4]))){
temp <- bike_test[i,c(1:3)]
bike_test[i,c(1:3)] <- bike_test[i,c(4:6)]
bike_test[i,c(4:6)] <- temp
}
}
bike_test <- bike_test %>% group_by(start_station, start_lat, start_lon, end_station, end_lat, end_lon) %>% summarize(count = n())
bike_test <- biketrips_a[c(1:100), c(5:10)]
for (i in nrow(bike_test)){
if (as.numeric(bike_test[i,1]>as.numeric(bike_test[i,4]))){
temp <- bike_test[i,c(1:3)]
bike_test[i,c(1:3)] <- bike_test[i,c(4:6)]
bike_test[i,c(4:6)] <- temp
}
}
View(bike_test)
